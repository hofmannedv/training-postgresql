Learning PostgreSQL
===================
Frank Hofmann
:subtitle:
:doctype: book
:copyright: Frank Hofmann
:revnumber: 1.0
:Author Initials: FH
:edition: 1
:lang: en
:date: October 21, 2014
:numbered:

= Preface =

An example database for the first steps using PostgreSQL.

The file `publications.data` consists of the example database
`publications` with two tables named `authors`, and `publications`. For
installing PostgreSQL, and creating the database see the introduction of
this tutorial. This part shows how to select data, and specify the data
output.

== Selecting data ==

To display the contents of the authors table use the `SELECT` command as
shown below. The simple usage is as follows:

----
SELECT column [,column] FROM table;
----

As a column you may either specify a list of column names from the named
table, or the `*` operator. 

----
publications=# SELECT booktitle FROM publications;
     booktitle
- -----------------
 World Without End
 Set In Darkness
 Black And Blue
 Jackdaws
(4 Zeilen)
----

The `*` operator selects all the columns from the named table. At the
end the output includes the statement how many lines have been fetched
from the table. As you can see above these are four lines, and three
lines in the output below.

----
publications=# SELECT * FROM authors; 
 id |    name
----+-------------
  1 | Ken Follet
  2 | Ian Rankin
  3 | Stephen Fry
(3 Zeilen)
----

The sort order is not predictable, because there are no rules about the
sort order. Usually, the entries are shown as the DBMS fetches them from
the database table, and as they had been added to the table before.

== Sorting the output ==

=== By a certain column ===

PostgreSQL supports so-called SQL clauses. One of these is `ORDER BY`
to sort the output by one or more columns. It is defined as follows:

----
SELECT colunmlist
FROM table
ORDER BY column name [,column name] [ASC|DESC];
----

To display the contents of the publications table and sort by
publications title, the `ORDER BY` statement comes into play followed
the name of the column `booktitle`.

----
publications=# SELECT * FROM publications ORDER BY booktitle;
 id | authorid |     booktitle     
----+----------+-------------------
  3 |        2 | Black And Blue
  4 |        1 | Jackdaws
  2 |        2 | Set In Darkness
  1 |        1 | World Without End
(4 Zeilen)
----

=== By more than one column ===

The `ORDER BY` clause allows you to specify more than one column.
PostgreSQL sorts the items accordingly from left to right.

The example below displays sorting by author (column `authorid`),
firstly, and by book title (column `booktitle`), secondly.

----
publications=# SELECT * FROM publications ORDER BY authorid,booktitle;
 id | authorid |     booktitle
----+----------+-------------------
  4 |        1 | Jackdaws
  1 |        1 | World Without End
  3 |        2 | Black And Blue
  2 |        2 | Set In Darkness
(4 Zeilen)
----

=== Ascending and descending sort order ===

As already stated above the output sort order is not guaranteed.
PostgreSQL offers two further clauses to specify this -- `ASC`, and
`DESC`. The statement `ASC` sorts in ascending order, and `DESC` in
descending order, respectively.

The example below shows the output from table `publications` sorted by
`booktitle` in descending order.

----
publications=# SELECT * FROM publications ORDER BY booktitle DESC;
 id | authorid |     booktitle     
----+----------+-------------------
  1 |        1 | World Without End
  2 |        2 | Set In Darkness
  4 |        1 | Jackdaws
  3 |        2 | Black And Blue
(4 Zeilen)
----

== Filtering the output ==
=== Suppress duplicates using `DISTINCT` ===

Usually, the output contains all the rows that might be a bit too much
in some situations. Now, the `DISTINCT` statement comes into play. The
database server suppresses the output of duplicate entries. 

----
SELECT 
DISTINCT columnlist
FROM table;
----

The example below shows the list of authors with unique values.

----
publications=# SELECT DISTINCT authorid FROM publications;
 authorid 
- --------
        1
        2
(2 Zeilen)
----

=== Use conditions and the `WHERE` statement ===

The `WHERE` statement allows you to set conditions, and to filter the
rows that match these conditions, only. The definition is like that:

----
SELECT colunmlist
FROM table
WHERE condition;
----

In a condition you can use the following operators:

[frame="topbot",options="header",id="tab.operators"]
|====
| Operator  | Description
| `<`  | less than
| `<=` | less or equal than 
| `=`  | equal
| `>=` | greater or equal than
| `>`  | greater than
| `<>` and `!=` | not
| `IN` | member in a set
| `BETWEEN` | specify an interval
|====

To display the entries in which the authorId is 1 (= all books by Ken
Follett as he owns authorId 1) use this:

----
publications=# SELECT * FROM publications WHERE authorId = 1;
 id | authorid |     booktitle
----+----------+-------------------
  1 |        1 | World Without End
  4 |        1 | Jackdaws
(2 Zeilen)
----

It is also possible to combine conditions using the `OR` operator. The
next example shows the output that contains all entries which have
either id as 1, or 4.

----
publications=# SELECT * FROM publications WHERE id = 1 OR id = 4;
 id | authorid |     booktitle     
----+----------+-------------------
  1 |        1 | World Without End
  4 |        1 | Jackdaws
(2 Zeilen)
----

To display the entries in which the id is either 1, 3, or 4, you may use
the `IN` operator as follows:

----
publications=# SELECT * FROM publications WHERE id IN (1, 3, 4);
 id | authorid |     booktitle     
----+----------+-------------------
  1 |        1 | World Without End
  3 |        2 | Black And Blue
  4 |        1 | Jackdaws
(3 Zeilen)
----

PostgreSQL also knows the keyword `BETWEEN` to specify a range of
values.

----
publications=# SELECT * FROM publications WHERE id BETWEEN 2 AND 4;
 id | authorid |    booktitle    
----+----------+-----------------
  2 |        2 | Set In Darkness
  3 |        2 | Black And Blue
  4 |        1 | Jackdaws
(3 Zeilen)
----

=== Limit the output ===

In certain situations you may like to limit the lines of output, for
example on a website displaying the search result. At this point the
`LIMIT` keyword comes into play. The definition is like that:

----
SELECT colunmlist
FROM table
LIMIT number
OFFSET index;
----

The value of `number` sets the maximum number of output lines. The next
example displays the first three entries, only:

----
publications=# SELECT * FROM publications LIMIT 3;
 id | authorid |     booktitle     
----+----------+-------------------
  1 |        1 | World Without End
  2 |        2 | Set In Darkness
  3 |        2 | Black And Blue
(3 Zeilen)
----

To start at a certain output entry the start position can be specified
using the `OFFSET` value. Keep in mind that PostgreSQL starts to count
at offset 0. To start from the second entry you can write this query:

----
publications=# SELECT * FROM publications LIMIT 3 OFFSET 1;
 id | authorid |    booktitle    
----+----------+-----------------
  2 |        2 | Set In Darkness
  3 |        2 | Black And Blue
  4 |        1 | Jackdaws
(3 Zeilen)
----

=== Search patterns using `LIKE` and `ILIKE` ===

You can define search patterns using the `LIKE` operator, and meta
characters. This helps to find matches in a table.

Using the `LIKE` operator you can search for patterns at the beginning
as well as at the end of strings, and for fragments, too. This helps you
to find substrings no matter where they appear in your string. In case
of a match the `LIKE` operator returns `TRUE`, and `FALSE` otherwise.
Combining the two operators `NOT` and `LIKE` reverses the result.

To specify a pattern the following characters are allowed to use:

[frame="topbot",options="header",id="tab.pattern"]
|====
| Query  | Description
| `LIKE '%'` | Return all the matches. `%` represents all characters.
| `LIKE '%e'` | Return all the matches that end with character `e`.
| `LIKE 'a%'` | Return all the matches that start with character `a`.
| `LIKE '%web%'` | Return all the matches that contain the substring `web`.
| `LIKE '%ws_%'` | Return all the matches that end with the substring `ws` followed by any other character.
| `LIKE '-----'` | Return all the matches that are five characters in
length.
|====

To find all books which have `ack` in its book title write your query
like this:

----
publications=# SELECT * FROM publications WHERE booktitle LIKE '%ack%';
 id | authorid |   booktitle    
----+----------+----------------
  3 |        2 | Black And Blue
  4 |        1 | Jackdaws
(2 Zeilen)
----

To find an exact pattern use the `LIKE` operator. To find patterns no
matter which spelling the `ILIKE` operator can be helpful. `ILIKE` is a
PostgreSQL extension, and does not belong to the SQL standard set.

In the following example all entries are fetched from the table that
start with the substring `BL` followed by any other characters, no
matter whether these characters are lowercase or uppercase.

----
publications=# SELECT * FROM publications WHERE booktitle ILIKE 'BL%';
 id | authorid |   booktitle    
----+----------+----------------
  3 |        2 | Black And Blue
(1 Zeile)
----

Furthermore, PostgreSQL supports the following alternative ways of
writing for the operators `LIKE`, and `ILIKE`.

[frame="topbot",options="header",id="tab.pattern-alternatives"]
|====
| Pattern  | Alternative spelling
| `~~` | `LIKE`
| `!~~` | `NOT LIKE`
| `~~*` | `ILIKE`
| `!~~*` | `NOT ILIKE`
|====


