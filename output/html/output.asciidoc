Learning PostgreSQL
===================
Frank Hofmann
:subtitle:
:doctype: book
:copyright: Frank Hofmann
:revnumber: 1.0
:Author Initials: FH
:edition: 1
:lang: en
:date: October 18, 2014
:numbered:

= Preface =

An example database for the first steps using PostgreSQL.

The file `publications.data` consists of the example database
`publications` with two tables named `authors`, and `publications`. This
example shows how to select data, and specify the data output.

== Selecting data ==

To display the contents of the authors table use the `SELECT` command as
shown below. The simple usage is as follows:

----
SELECT column [,column] FROM table
----

As a column you may either specify a list of column names from the named
table, or the `*` operator. 

----
publications=# SELECT booktitle FROM publications;
     booktitle
- -----------------
 World Without End
 Set In Darkness
 Black And Blue
 Jackdaws
(4 Zeilen)
----

The `*` operator selects all the columns from the named table. At the
end the output includes the statement how many lines have been fetched
from the table. As you can see above these are four lines, and three
lines in the output below.

----
publications=# SELECT * FROM authors; 
 id |    name
----+-------------
  1 | Ken Follet
  2 | Ian Rankin
  3 | Stephen Fry
(3 Zeilen)
----

The sort order is not predictable, because there are no rules about the
sort order. Usually, the entries are shown as the DBMS fetches them from
the database table, and as they had been added to the table before.

== Sorting the output ==

=== By a certain column ===

PostgreSQL supports so-called SQL clauses. One of these is `ORDER BY`
to sort the output by one or more columns. It is defined as follows:

----
SELECT colunmlist
FROM table
ORDER BY column name [,column name] [ASC|DESC]
----

To display the contents of the publications table and sort by
publications title, the `ORDER BY` statement comes into play followed
the name of the column `booktitle`.

----
publications=# SELECT * FROM publications ORDER BY booktitle;
 id | authorid |     booktitle     
----+----------+-------------------
  3 |        2 | Black And Blue
  4 |        1 | Jackdaws
  2 |        2 | Set In Darkness
  1 |        1 | World Without End
(4 Zeilen)
----

=== By more than one column ===

The `ORDER BY` clause allows you to specify more than one column.
PostgreSQL sorts the items accordingly from left to right.

The example below displays sorting by author (column `authorid`),
firstly, and by book title (column `booktitle`), secondly.

----
publications=# SELECT * FROM publications ORDER BY authorid,booktitle;
 id | authorid |     booktitle
----+----------+-------------------
  4 |        1 | Jackdaws
  1 |        1 | World Without End
  3 |        2 | Black And Blue
  2 |        2 | Set In Darkness
(4 Zeilen)
----

=== Ascending and descending sort order ===

As already stated above the output sort order is not guaranteed.
PostgreSQL offers two further clauses to specify this -- `ASC`, and
`DESC`. The statement `ASC` sorts in ascending order, and `DESC` in
descending order, respectively.

The example below shows the output from table `publications` sorted by
`booktitle` in descending order.

----
publications=# SELECT * FROM publications ORDER BY booktitle DESC;
 id | authorid |     booktitle     
----+----------+-------------------
  1 |        1 | World Without End
  2 |        2 | Set In Darkness
  4 |        1 | Jackdaws
  3 |        2 | Black And Blue
(4 Zeilen)
----

== Filtering the output ==
=== Suppress duplicates using `DISTINCT` ===

Usually, the output contains all the rows that might be a bit too much
in some situations. Now, the `DISTINCT` statement comes into play. The
database server suppresses the output of duplicate entries. 

----
SELECT 
DISTINCT colunmlist
FROM table;
----

The example below shows the list of authors with unique values.

----
publications=# SELECT DISTINCT authorid FROM publications;
 authorid 
- --------
        1
        2
(2 Zeilen)
----

=== Use conditions and the `WHERE` statement ===

The `WHERE` statement allows you to set conditions, and to filter the
rows that match these conditions, only. The definition is like that:

----
SELECT colunmlist
FROM table
WHERE condition;
----
